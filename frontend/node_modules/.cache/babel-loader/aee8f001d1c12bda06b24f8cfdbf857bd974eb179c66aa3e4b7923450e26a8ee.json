{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aimva\\\\OneDrive\\\\Desktop\\\\meteorite_prediction_project\\\\frontend\\\\src\\\\components\\\\MeteoritePredictor.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\"; // Import React and useState\nimport { Button } from '../ui/button'; // Adjusted import for Button component\nimport { Input } from '../ui/input'; // Adjusted import for Input component\nimport { Card, CardContent } from '../ui/card'; // Adjusted import for Card and CardContent components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MeteoritePredictor = () => {\n  _s();\n  const [year, setYear] = useState(2025); // Manage the selected year\n  const [predictions, setPredictions] = useState([]); // Store the predictions\n\n  // Function to handle prediction request\n  const predictMeteorites = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/predict\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          year\n        }) // Send year as a JSON payload\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setPredictions([{\n          year,\n          lat: data.lat,\n          long: data.long\n        }]); // Use the data received from the backend\n      } else {\n        console.error(\"Failed to get prediction from backend\");\n      }\n    } catch (error) {\n      console.error(\"Error making prediction request:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"w-full max-w-md mx-auto\",\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        className: \"p-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-bold mb-2\",\n          children: \"Meteorite Strike Predictor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"number\",\n          value: year,\n          onChange: e => setYear(parseInt(e.target.value)),\n          className: \"mb-4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: predictMeteorites,\n          className: \"w-full\",\n          children: \"Predict\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4\",\n          children: predictions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"font-semibold\",\n              children: \"Predicted Strike Locations:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 17\n            }, this), predictions.map((p, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Year \", p.year, \": Latitude \", p.lat.toFixed(2), \", Longitude \", p.long.toFixed(2)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(MeteoritePredictor, \"1u7y4O2VdkvDSzvRBAldX+Ss1X8=\");\n_c = MeteoritePredictor;\nexport default MeteoritePredictor;\nvar _c;\n$RefreshReg$(_c, \"MeteoritePredictor\");","map":{"version":3,"names":["React","useState","Button","Input","Card","CardContent","jsxDEV","_jsxDEV","MeteoritePredictor","_s","year","setYear","predictions","setPredictions","predictMeteorites","response","fetch","method","headers","body","JSON","stringify","ok","data","json","lat","long","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","parseInt","target","onClick","length","map","p","index","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/aimva/OneDrive/Desktop/meteorite_prediction_project/frontend/src/components/MeteoritePredictor.js"],"sourcesContent":["import React, { useState } from \"react\"; // Import React and useState\r\nimport { Button } from '../ui/button'; // Adjusted import for Button component\r\nimport { Input } from '../ui/input'; // Adjusted import for Input component\r\nimport { Card, CardContent } from '../ui/card'; // Adjusted import for Card and CardContent components\r\n\r\nconst MeteoritePredictor = () => {\r\n  const [year, setYear] = useState(2025); // Manage the selected year\r\n  const [predictions, setPredictions] = useState([]); // Store the predictions\r\n\r\n  // Function to handle prediction request\r\n  const predictMeteorites = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/predict\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ year }), // Send year as a JSON payload\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setPredictions([{ year, lat: data.lat, long: data.long }]); // Use the data received from the backend\r\n      } else {\r\n        console.error(\"Failed to get prediction from backend\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error making prediction request:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <Card className=\"w-full max-w-md mx-auto\">\r\n        <CardContent className=\"p-4\">\r\n          <h2 className=\"text-xl font-bold mb-2\">Meteorite Strike Predictor</h2>\r\n          <Input\r\n            type=\"number\"\r\n            value={year}\r\n            onChange={(e) => setYear(parseInt(e.target.value))}\r\n            className=\"mb-4\"\r\n          />\r\n          <Button onClick={predictMeteorites} className=\"w-full\">\r\n            Predict\r\n          </Button>\r\n          <div className=\"mt-4\">\r\n            {predictions.length > 0 && (\r\n              <div>\r\n                <h3 className=\"font-semibold\">Predicted Strike Locations:</h3>\r\n                {predictions.map((p, index) => (\r\n                  <p key={index}>\r\n                    Year {p.year}: Latitude {p.lat.toFixed(2)}, Longitude {p.long.toFixed(2)}\r\n                  </p>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MeteoritePredictor;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}